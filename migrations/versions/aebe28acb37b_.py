"""empty message

Revision ID: aebe28acb37b
Revises: e2a81baeffc4
Create Date: 2022-04-14 23:54:45.417779

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'aebe28acb37b'
down_revision = 'e2a81baeffc4'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('loan_note_book',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('partner_id', sa.Integer(), nullable=True),
    sa.Column('partner_name', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['partner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('loan_payment', sa.Column('loan_id', sa.Integer(), nullable=False))
    op.drop_constraint('loan_payment_dept_id_fkey', 'loan_payment', type_='foreignkey')
    op.create_foreign_key(None, 'loan_payment', 'loans', ['loan_id'], ['id'])
    op.drop_column('loan_payment', 'dept_id')
    op.add_column('loans', sa.Column('note_id', sa.Integer(), nullable=True))
    op.add_column('loans', sa.Column('recieve_money_at', sa.DateTime(), nullable=True))
    op.add_column('loans', sa.Column('payment_status', sa.Boolean(), nullable=True))
    op.drop_constraint('loans_user_id_fkey', 'loans', type_='foreignkey')
    op.drop_constraint('loans_lender_id_fkey', 'loans', type_='foreignkey')
    op.create_foreign_key(None, 'loans', 'loan_note_book', ['note_id'], ['id'])
    op.drop_column('loans', 'provenance')
    op.drop_column('loans', 'user_id')
    op.drop_column('loans', 'received_at')
    op.drop_column('loans', 'lender_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('loans', sa.Column('lender_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('loans', sa.Column('received_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('loans', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('loans', sa.Column('provenance', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'loans', type_='foreignkey')
    op.create_foreign_key('loans_lender_id_fkey', 'loans', 'users', ['lender_id'], ['id'])
    op.create_foreign_key('loans_user_id_fkey', 'loans', 'users', ['user_id'], ['id'])
    op.drop_column('loans', 'payment_status')
    op.drop_column('loans', 'recieve_money_at')
    op.drop_column('loans', 'note_id')
    op.add_column('loan_payment', sa.Column('dept_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'loan_payment', type_='foreignkey')
    op.create_foreign_key('loan_payment_dept_id_fkey', 'loan_payment', 'loans', ['dept_id'], ['id'])
    op.drop_column('loan_payment', 'loan_id')
    op.drop_table('loan_note_book')
    # ### end Alembic commands ###
